#! /usr/bin/env python3

import sys,argparse
from collections import OrderedDict
from os.path import join, basename, dirname
from pathlib import Path

# These two functions copied and modified from cellbrowser.py
def readLines(lines, fname):
    " recursively read lines from fname, understands lines like #include 'filename.conf' "
    for line in open(fname):
        line = line.rstrip("\r\n")
        if line.startswith("#include"):
            newFname = splitOnce(line, " ")[1]
            newFname = newFname.strip('"').strip("'")
            lines.extend(readLines(lines, newFname))
        else:
            lines.append(line)
    return lines

def loadConfig(fname):
    """ parse python in fname and return variables as dictionary.
    add the directory of fname to the dict as 'inDir'.
    """

    conf = OrderedDict()

    g = {}
    g["fileBase"] = basename(fname).split('.')[0]
    g["dirName"] = basename(dirname(fname))

    lines = readLines([], fname)
    exec("\n".join(lines), g, conf)

    return conf

# Set up script arguments
parser = argparse.ArgumentParser(
    formatter_class=argparse.RawDescriptionHelpFormatter,
    description="Add/update tag values for a list of datasets")
parser.add_argument('datasetFile', type=str, help='file containing list of datasets in first column \
and any tags to add/update in subsequent columns. Header should contain tag names that should match \
those in the example cellbrowser.conf, e.g. body_parts.')
args = parser.parse_args()

# From https://stackoverflow.com/questions/541390/extracting-extension-from-filename-in-python
dFtype = Path(args.datasetFile).suffix

if dFtype == ".csv":
    dsep = ","
elif dFtype == ".tsv":
    dsep = "\t"
else:
    print("datasetFile must have tsv or csv file extension")
    exit(1)

dfh = open(args.datasetFile)

# If datasets file has info for the tag already
# get column num so we can replace it
header = dfh.readline().rstrip().split(dsep)

# Now process rest of datasetFile
for line in dfh:
    splitLine = line.rstrip().split(dsep)
    dname = splitLine[0]
    tagsAdded = set()
    confName = join("/hive/data/inside/cells/datasets",dname,"cellbrowser.conf")
    conf = loadConfig(confName)
    for tag in header:
        if tag != "dataset":
            n = header.index(tag)
            if tag not in conf.keys():
                vals = splitLine[n].strip().split(' ')
                with open(confName,"a") as f:
                    f.write(tag + "=" + str(vals) + "\n")
            else:
                outConf = ""
                for tagLine in open(confName):
                    splitTag = tagLine.strip().split("=")
                    confTag = splitTag[0]
                    if confTag == tag:
                        vals = splitLine[n].strip().split(' ')
                        outConf += tag + "=" + str(vals) + "\n"
                    else:
                        outConf += tagLine
                with open(confName,"w") as f:
                    f.write(outConf)
